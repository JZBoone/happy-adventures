import { GroundType } from "../ground";
import { ImageAsset } from "../image";

const blackHoleCoordinates: [y: number, x: number][] = [
  [0, 3],
  [1, 2],
  [1, 3],
  [1, 4],
  [1, 5],
  [1, 6],
  [2, 0],
  [2, 2],
  [2, 6],
  [2, 13],
  [3, 2],
  [3, 3],
  [3, 6],
  [3, 9],
  [4, 6],
  [5, 1],
  [5, 5],
  [5, 6],
  [5, 13],
  [6, 10],
  [9, 3],
  [9, 12],
  [9, 12],
  [10, 8],
];

export const map: GroundType[][] = (() => {
  const _map: GroundType[][] = [
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
    [
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
      ImageAsset.Stone,
    ],
  ];
  for (const [y, x] of blackHoleCoordinates) {
    if (!_map[y][x]) {
      throw new Error(`Invalid black hole coordinate: x: ${x} y: ${y}`);
    }
    _map[y][x] = ImageAsset.BlackHole;
  }
  return _map;
})();
